"""
Реализовать программу работы с органическими клетками, состоящими из ячеек.

Необходимо создать класс Клетка (Cell).

В его конструкторе инициализировать параметр (quantity),
соответствующий количеству ячеек клетки (целое число).

В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (add()),
вычитание (sub()),
умножение (mul()),
деление (truediv()).

Данные методы должны применяться только к клеткам и выполнять увеличение,
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

Сложение. Объединение двух клеток.
При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

Вычитание. Участвуют две клетки.
Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
иначе выводить соответствующее сообщение.

Умножение. Создается общая клетка из двух.
Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

Деление. Создается общая клетка из двух.
Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

** - По желанию: В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида **\n\n***...,
где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: **\n\n.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернет строку: **\n\n***.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.

Пример клиентского кода:
print("Создаем объекты клеток")
cell1 = Cell(30)
cell2 = Cell(25)

cell3 = Cell(10)
cell4 = Cell(15)

print()

print("Складываем")
print(cell1 + cell2)

print()

print("Вычитаем")
print(cell2 - cell1)
print(cell4 - cell3)

print()

print("Умножаем")
print(cell2 * cell1)

print()

print("Делим")
print(cell1 / cell2)

print()

print("Организация ячеек по рядам")
print(cell1.make_order(5))
print(cell2.make_order(10))

Результаты:
Создаем объекты клеток

Складываем
Сумма клеток = (55)

Вычитаем
Разность отрицательна, поэтому операция не выполняется
Разность клеток = (5)

Умножаем
Умножение клеток = (750)

Делим
Деление клеток = (1)

Организация ячеек по рядам
**\n *\n *\n *\n *\n *\n
******\n ****\n **
"""


class Critical_err(Exception):
    """Отлавливаем ошибки критичные для дальнейших расчетов или которые
    противоречат основной концепции.
    код ошибки 5 указывает на критическую ошибку и прерывает выполнение
    программы"""

    def __init__(self, txt):
        self.txt = txt
        print(self.txt)
        exit(5)


class OwnError(Exception):
    """Отлавливаем не критичные ошибки, после которых должны продолжится
    вычисления в клиентском коде"""

    def __init__(self, txt):
        self.txt = txt


class Cell:
    """Создаем класс Клетка для с методами сложения, вычитания, умножения
    и деления для изучения взаимодействия сущностей Клетка"""

    def __init__(self, quantity):
        """Определяем исходное строение клетки - задаваемое количеством ячеек
        в клетке.
        контролируем чтобы параметр количество ячее был правильный"""
        try:
            inp_data = int(quantity)
            if inp_data <= 0:
                raise Critical_err(
                    "Количество ячеек не может быть 0 или меньше нуля!")
        except ValueError:
            raise Critical_err("Вы ввели не число")
        except Critical_err as err:
            print(err)
        else:
            self.quantity = inp_data

    def __add__(self, other):
        """Метод сложения клеток"""
        New_Cell = Cell(self.quantity + other.quantity)
        return New_Cell

    def __sub__(self, other):
        """Метод вычитания клеток"""
        try:
            if (self.quantity - other.quantity) > 0:
                New_Cell = Cell(self.quantity - other.quantity)
                return New_Cell
            else:
                raise OwnError("Нельзя вычесть из меньшей клетки большую")
        except OwnError as err:
            print(err)

    def __mul__(self, other):
        """Метод умножения клеток"""
        New_Cell = Cell(self.quantity * other.quantity)
        return New_Cell

    def __truediv__(self, other):
        """Метод деления клеток"""
        try:
            if (self.quantity // other.quantity) > 0:
                New_Cell = Cell(self.quantity // other.quantity)
                return New_Cell
            else:
                raise OwnError("Нельзя разделить меньшую клетку на большую!")
        except OwnError as err:
            print(err)

    def __str__(self):
        return f"результат действия: {self.quantity}"


print("Создаем объекты клеток")
cell1 = Cell(30)
cell2 = Cell(25)
cell3 = Cell(10)
cell4 = Cell(15)
print()
print("Складываем")
print(cell1 + cell2)
print()
print("Вычитаем")
print(cell2 - cell1)
print(cell4 - cell3)
print()
print("Умножаем")
print(cell2 * cell1)
print()
print("Делим")
print(cell1 / cell2)
print(cell3 / cell4)
print()
